// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMARTbusiness.TestTask.Application.Database;

#nullable disable

namespace SMARTbusiness.TestTask.Application.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SMARTbusiness.TestTask.Domain.Entities.EquipmentPlacementContract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("EquipmentUnitsCount")
                        .HasColumnType("int");

                    b.Property<Guid>("ProcessEquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductionFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProcessEquipmentTypeId");

                    b.HasIndex("ProductionFacilityId");

                    b.ToTable("EquipmentPlacementContracts");
                });

            modelBuilder.Entity("SMARTbusiness.TestTask.Domain.Entities.ProcessEquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProcessEquipmentTypes");
                });

            modelBuilder.Entity("SMARTbusiness.TestTask.Domain.Entities.ProductionFacility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StandardArea")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ProductionFacilities");
                });

            modelBuilder.Entity("SMARTbusiness.TestTask.Domain.Entities.EquipmentPlacementContract", b =>
                {
                    b.HasOne("SMARTbusiness.TestTask.Domain.Entities.ProcessEquipmentType", "ProcessEquipmentType")
                        .WithMany()
                        .HasForeignKey("ProcessEquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SMARTbusiness.TestTask.Domain.Entities.ProductionFacility", "ProductionFacility")
                        .WithMany("EquipmentPlacementContracts")
                        .HasForeignKey("ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProcessEquipmentType");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("SMARTbusiness.TestTask.Domain.Entities.ProductionFacility", b =>
                {
                    b.Navigation("EquipmentPlacementContracts");
                });
#pragma warning restore 612, 618
        }
    }
}
